# -*- coding: utf-8 -*-
"""fraud detection model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sBBZ_zcYYUV8IFaNspi-Afn-k4ctbamS
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

file_path = '/content/creditcard.csv'

df = pd.read_csv('/content/creditcard.csv')

df.head()

df.isnull().sum()

df.head()

df

df.shape

df.describe

df.describe()

df.dropna()

df.describe

df.isnull().any()

df.columns

# X will contain all columns except 'class', and rows with NaN values will be dropped
X = df.drop('Class', axis =1).dropna()

# Assuming 'class' is the target variable (y)
y = df['Class'].dropna()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train logistic regression model
logregg_model = LogisticRegression()
logregg_model.fit(X_train, y_train)

# Train decision tree model
dt_model = DecisionTreeClassifier()
dt_model.fit(X_train, y_train)

# Train random forests model
rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)

svm_model = SVC()
svm_model.fit(X_train, y_train)

# Build a simple neural network
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    layers.Dense(32, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the neural network
model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2)

# Evaluate the neural network
nn_accuracy = model.evaluate(X_test, y_test)[1]
print("\nNeural Network Accuracy:", nn_accuracy)

